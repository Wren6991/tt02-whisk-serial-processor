#!/usr/bin/env python3

# Quick and dirty assembler for Whisk, written pre-tapeout
# Supports "disassembly" (actually just annotates the assembly)

import argparse
import re
import sys
from whisk_asm_const import *

# Records of the form: (opcode, op rd, op rs, op rt, rt is optional)
INSTR = {
	# Two reg operands
	"add":    (OPC_ADD,                                                      1, 1, 1, 0),
	"sub":    (OPC_SUB,                                                      1, 1, 1, 0),
	"and":    (OPC_AND,                                                      1, 1, 1, 0),
	"andn":   (OPC_ANDN,                                                     1, 1, 1, 0),
	"or":     (OPC_OR,                                                       1, 1, 1, 0),
	# One reg operand with minor opcode in rt
	"sll":    (OPC_SHIFT | (OPC2_SLL << INSTR_RT_LSB),                       1, 1, 0, 0),
	"sra":    (OPC_SHIFT | (OPC2_SRA << INSTR_RT_LSB),                       1, 1, 0, 0),
	"srl":    (OPC_SHIFT | (OPC2_SRL << INSTR_RT_LSB),                       1, 1, 0, 0),
	# One reg with minor opcode in rs
	"in":     (OPC_INOUT | (OPC2_IN  << INSTR_RS_LSB) | (6 << INSTR_RT_LSB), 1, 0, 0, 0),
	"out":    (OPC_INOUT | (OPC2_OUT << INSTR_RS_LSB) | (6 << INSTR_RD_LSB), 0, 0, 1, 0),
	"in2":    (OPC_INOUT | (OPC2_IN  << INSTR_RS_LSB),                       1, 0, 1, 0),
	"out2":   (OPC_INOUT | (OPC2_OUT << INSTR_RS_LSB),                       1, 0, 1, 0),
	# Double-reg memory operand
	"lhia":   (OPC_LHIA,                                                     1, 1, 1, 1),
	"lh":     (OPC_LH,                                                       1, 1, 1, 1),
	"lhib":   (OPC_LHIB,                                                     1, 1, 1, 1),
	"shia":   (OPC_SHIA,                                                     1, 1, 1, 1),
	"sh":     (OPC_SH,                                                       1, 1, 1, 1),
	"shib":   (OPC_SHIB,                                                     1, 1, 1, 1),
	# Single-reg memory, minor in rt
	"lb":     (OPC_LB | (OPC2_LB << INSTR_RT_LSB),                           1, 1, 0, 0),
	"lbs":    (OPC_LB | (OPC2_LBS << INSTR_RT_LSB),                          1, 1, 0, 0),
	"sb":     (OPC_LB | (OPC2_LBS << INSTR_RT_LSB),                          1, 1, 0, 0),
	# Pseudo-ops which don't need macros
	"mov":    (OPC_ADD  | (6 << INSTR_RS_LSB),                               1, 0, 1, 0),
	"not":    (OPC_ANDN | (6 << INSTR_RS_LSB),                               1, 0, 1, 0),
	"cmp":    (OPC_SUB  | (6 << INSTR_RD_LSB),                               0, 1, 1, 0),
	"cmn":    (OPC_ADD  | (6 << INSTR_RD_LSB),                               0, 1, 1, 0),
	"tst":    (OPC_AND  | (6 << INSTR_RD_LSB),                               0, 1, 1, 0),
	"tstn":   (OPC_ANDN | (6 << INSTR_RD_LSB),                               0, 1, 1, 0),
}

REGS = {
	"r0": 0,
	"r1": 1,
	"r2": 2,
	"r3": 3,
	"r4": 4,
	"r5": 5,
	"pc": 7,
	"lr": 4,
	"sp": 5,
	"zero": 6
}

COND = {
	"al": 0x0,
	"pr": 0x1, # Same as "always", but preserve current flags
	"ns": 0x2,
	"nc": 0x3,
	"cs": 0x4,
	"cc": 0x5,
	"zs": 0x6,
	"zc": 0x7,
}

def next_word(l, l_full, i):
	if i >= len(l) - 1:
		raise Exception(f"Unexpected EOL on line '{l_full}'")
	return i + 1

def get_immediate(l, w):
	try:
		imm = int(w, 0)
	except:
		raise Exception(f"Invalid integer literal '{w}' on line '{l}'")
	if imm < -1 << 15 or imm > (1 << 16) - 1:
		raise Exception(f"Immediate operand '{w}' is out of range on line '{l_full}'")
	return imm & 0xffff

def get_reg(l, l_full, i, exclude=[], allow_comma=False):
	if l[i] not in REGS:
		raise Exception(f"Not a valid register: '{l[i]}' on line '{l_full}'")
	if l[i] in exclude:
		raise Exception(f"Register not allowed in this position: '{l[i]}' on line '{l_full}'")
	regnum = REGS[l[i]]
	# Optional comma
	if allow_comma and i < len(l) - 1 and l[i + 1] == ",":
		i += 1
	return i, regnum


def assemble(lines):
	output = []
	disasm = []
	macros = []
	relocs = []
	labels = dict()

	for l in lines:
		l_full = l.strip()
		l = l.strip().split("//")[0]
		l = list(w for w in re.split(r'\s+|(\@|\:|,|#|\.)', l) if w)
		if len(l) == 0:
			continue
		if len(l) == 2 and l[1] == ":":
			if l[0] in labels:
				raise Exception(f"Duplicate label '{l[0]}' on line '{l_full}'")
			labels[l[0]] = len(output)
			continue

		if l[0] == "." and len(l) > 1:
			if l[1] == "hword":
				if len(l) != 3:
					raise Exception(f"Need argument for directive on line '{l_full}'")
				imm = get_immediate(l_full, l[2])
				output.append(imm)
				disasm.append((imm, l_full))
			else:
				raise Exception(f"Unrecognised directive '{l[1]}' on line '{l_full}'")
			continue

		if l[0] not in INSTR:
			raise Exception(f"Unrecognised opcode '{l[0]}' on line '{l_full}'")
		imm_operand = None
		opc, expect_rd, expect_rs, expect_rt, rt_optional = INSTR[l[0]]
		i = 0

		# Optional condition code
		if len(l) > 1 and l[1] == ".":
			i = next_word(l, l_full, i)
			i = next_word(l, l_full, i)
			if l[i] not in COND:
				raise Exception(f"Unrecognised condition code '{l[i]}' on line '{l_full}'")
			opc |= COND[l[i]] << INSTR_COND_LSB

		if expect_rd:
			i = next_word(l, l_full, i)
			i, r = get_reg(l, l_full, i, allow_comma=expect_rs or expect_rt or expect_mem or expect_mem2)
			opc |= r << INSTR_RD_LSB

		if expect_rs:
			i = next_word(l, l_full, i)
			i, r = get_reg(l, l_full, i, allow_comma=expect_rt)
			opc |= r << INSTR_RS_LSB

		if expect_rt and rt_optional and i == len(l) - 1:
				opc |= 6 << INSTR_RT_LSB
		elif expect_rt:
			i = next_word(l, l_full, i)
			if l[i] == "@":
				i = next_word(l, l_full, i)
				opc |= 7 << INSTR_RT_LSB
				imm_operand = 0
				relocs.append((len(output) + 1, l[i]))
			elif l[i] == "#":
				i = next_word(l, l_full, i)
				opc |= 7 << INSTR_RT_LSB
				imm_operand = get_immediate(l_full, l[i])
			else:
				i, r = get_reg(l, l_full, i, exclude=["pc"])
				opc |= r << INSTR_RT_LSB

		if i < len(l) - 1:
			raise Exception(f"Garbage at end of line '{l_full}'")

		# Our "disasm" is just the binary annotated with the assembly :)
		output.append(opc)
		disasm.append((opc, l_full))
		if imm_operand is not None:
			output.append(imm_operand)
			disasm.append((imm_operand, "<immediate>"))

	for src, lname in relocs:
		if lname not in labels:
			raise Exception(f"Could not find a matching label: '{lname}'")
		offset = (labels[lname] - src) * 2 & 0xffff
		output[src] = offset
		disasm[src] = (offset, f"<reloc:{lname}>")
	return output, labels, disasm

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("src", help="Source assembly file (.S)")
	parser.add_argument("dst", help="Destination binary file (- for stdout)", nargs="?")
	parser.add_argument("--map", help="Write out all labels to a file (- for stdout)")
	parser.add_argument("--dis", help="Write out \"disassembly\" to a file (- for stdout)")
	args = parser.parse_args()

	instrs, labels, disasm = assemble(open(args.src).readlines())

	if args.dst is not None:
		if args.dst == "-":
			for instr in instrs:
				print(f"{instr:04x}")
		else:
			with open(args.dst, "wb") as dstfile:
				for instr in instrs:
					# Bit swap! All data/instructions are LSB-first, but SPI
					# SRAM is traditionally treated as MSB-first. We only do
					# this swap for the final .bin file: elsewhere we render
					# our bytes in their correct natural bit order.
					instr = ((instr & 0xf0f0) >> 4) | ((instr & 0x0f0f) << 4)
					instr = ((instr & 0xcccc) >> 2) | ((instr & 0x3333) << 2)
					instr = ((instr & 0xaaaa) >> 1) | ((instr & 0x5555) << 1)
					dstfile.write(bytes((instr & 0xff, (instr >> 8) & 0xff)))

	if args.map is not None:
		if args.map == "-":
			mapfile = sys.stdout
		else:
			mapfile = open(args.map, "w")
		for name, val in labels.items():
			mapfile.write(f"{name}\t{val:04x}\n")

	if args.dis is not None:
		# Invert the labels dict so we can print those out in the disasm
		rev_labels = {}
		for name, val in labels.items():
			if val in rev_labels:
				rev_labels[val].extend(name)
			else:
				rev_labels[val] = [name]
		if args.dis == "-":
			disfile = sys.stdout
		else:
			disfile = open(args.dis, "w")
		for i, (instr, asm) in enumerate(disasm):
			if i in rev_labels:
				for name in rev_labels[i]:
					disfile.write(f"{name}:\n")
			disfile.write(f"{i*2:04x}: {instr:04x}    {asm}\n")


